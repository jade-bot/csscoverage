#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var outputs = require('../lib/output');

var program = require('commander');

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[options] [urls]')
	.option('-c, --config <file>', 'Config File')
  .option('-w, --web <port>', 'Start Web Server')
  .option('-o, --output <type>', 'Output type', 'text');

program.parse(process.argv);

var run = function(urls) {
  var coverage = require('../lib/coverage/csscoverage');
  coverage(urls, function() {
    outputs[program.output](this);
  });
};

if (program.config) {
  var urls = [];
  fs.readFile(program.config, 'utf8', function(err, data) {
    if (err) {
      console.log(program.config + ' doesn\'t exist');
      return;
    }

    var config = JSON.parse(data);
    var baseUrl = config.baseUrl || '';
    config.urls.forEach(function(url) {
      urls.push(baseUrl + url);
    });
    run(urls);
  });

} else if (program.web) {
  var app = require('../lib/web/app'); 
  var cp = require('child_process');
  app.listen(program.web, "0.0.0.0");
  console.log('Server started on port '+program.web);
  var job = cp.fork(path.join(__dirname, '../lib/web/lib/jobs.js'));
  console.log('Job server started');
} else if (program.args.length != 0) {
  var urls = program.args;
  run(urls);
} else {
  process.stdout.write(program.helpInformation());
  program.emit('--help');
  process.exit(1);
}
